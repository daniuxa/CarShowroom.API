<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CarShowroom.API</name>
    </assembly>
    <members>
        <member name="T:CarShowroom.API.Controllers.AutomobilesController">
            <summary>
            Controllers to work with automobile entity
            </summary>
        </member>
        <member name="M:CarShowroom.API.Controllers.AutomobilesController.#ctor(CarShowroom.Bll.Interfaces.IAutomobilesService,AutoMapper.IMapper)">
            <summary>
            Constructor of controller 
            </summary>
            <param name="automobileService">Service for working with data base</param>
            <param name="mapper">Auto mapper</param>
            <exception cref="T:System.ArgumentNullException">If parameters is null</exception>
        </member>
        <member name="M:CarShowroom.API.Controllers.AutomobilesController.GetAutomobiles(System.Int32,System.Int32)">
            <summary>
            Receive collection of automobiles
            </summary>
            <param name="pageNumber">Number of page which we want to receive</param>
            <param name="pageSize">Size of pages</param>
            <returns>Collection of automobiles</returns>
            <response code="200">Returned collection of automobiles</response>
        </member>
        <member name="T:CarShowroom.API.Controllers.BrandsController">
            <summary>
            Controller to work with brand entity
            </summary>
        </member>
        <member name="M:CarShowroom.API.Controllers.BrandsController.#ctor(CarShowroom.Bll.Interfaces.IBrandsService,AutoMapper.IMapper,CarShowroom.Bll.Interfaces.ICompaniesService)">
            <summary>
            Constructor of controller 
            </summary>
            <param name="brandsService">Brand service</param>
            <param name="mapper">Auto mapper</param>
            <param name="companiesService">Company service</param>
            <exception cref="T:System.ArgumentNullException">If parameter is null</exception>
        </member>
        <member name="M:CarShowroom.API.Controllers.BrandsController.GetBrands(System.Int32,System.Int32)">
            <summary>
            Receive collection of brands
            </summary>
            <param name="pageNumber">Number of page which we want to receive</param>
            <param name="pageSize">Size of pages</param>
            <returns>Collection of brands</returns>
            <response code="200">Returned collection of brands</response>
        </member>
        <member name="M:CarShowroom.API.Controllers.BrandsController.GetBrandsForCompany(System.String)">
            <summary>
            Receive collection of brands which are in the same company
            </summary>
            <param name="companyName">Name of the company</param>
            <returns>Collection of brands</returns>
            <response code="200">Returned collection of brands</response>
            <response code="404">Haven't found company</response>
        </member>
        <member name="M:CarShowroom.API.Controllers.BrandsController.GetBrandWithoutModels(System.Int32)">
            <summary>
            Receive brand without models
            </summary>
            <param name="brandId">Id of brand</param>
            <returns>Brand which has this Id</returns>
            <response code="200">Returned brand without models collection</response>
            <response code="404">Haven't found brand</response>
        </member>
        <member name="M:CarShowroom.API.Controllers.BrandsController.GetBrandWithModels(System.Int32)">
            <summary>
            Receive brand 
            </summary>
            <param name="brandId">Id of brand</param>
            <returns>Brand which has this Id</returns>
            <response code="200">Returned brand with models collection</response>
            <response code="404">Haven't found brand</response>
        </member>
        <member name="M:CarShowroom.API.Controllers.BrandsController.CreateBrand(CarShowroom.Bll.Models.BrandDTOs.BrandCreationDTO)">
            <summary>
            Add a brand to data base
            </summary>
            <param name="brand">Brand for adding</param>
            <returns>Added brand</returns>
            <response code="201">Added brand to data base</response>
        </member>
        <member name="M:CarShowroom.API.Controllers.BrandsController.DeleteBrand(System.Int32)">
            <summary>
            Delete brand from data base
            </summary>
            <param name="brandId">Id of brand</param>
            <returns>IActionResult</returns>
            <response code="204">Deleted brand from data base</response>
            <response code="404">Haven't found brand</response>
        </member>
        <member name="M:CarShowroom.API.Controllers.BrandsController.PartiallyUpdateBrand(System.Int32,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{CarShowroom.Bll.Models.BrandDTOs.BrandUpdateDTO})">
            <summary>
            Partially update of brand
            </summary>
            <param name="brandId">Id of brand</param>
            <param name="patchDocument">The set of operations to apply to the brand</param>
            <returns>IActionResult</returns>
            <response code="204">Updated brand</response>
            <response code="404">Haven't found brand</response>
            <response code="400">Incorrect entered command for updating</response>
            <remarks>
            Sample request (this request updates the brand's name)
            PATCH /Brands/id
            [
                {
                    "op": "replace",
                    "path": "/name",
                    "values": "NewName"
                }
            ]
            </remarks> 
        </member>
        <member name="T:CarShowroom.API.Controllers.EnginesController">
            <summary>
            Controller to work with engine entity
            </summary>
        </member>
        <member name="M:CarShowroom.API.Controllers.EnginesController.#ctor(CarShowroom.Bll.Interfaces.ICompaniesService,CarShowroom.Bll.Interfaces.IEnginesService,AutoMapper.IMapper)">
            <summary>
            Constructor of controller
            </summary>
            <param name="companiesService">Company service</param>
            <param name="enginesService">Engine service</param>
            <param name="mapper">Auto Mapper</param>
            <exception cref="T:System.ArgumentNullException">If parameter is null</exception>
        </member>
        <member name="M:CarShowroom.API.Controllers.EnginesController.GetEnginesFromCompany(System.String)">
            <summary>
            Receive collection of engines which are in the same company
            </summary>
            <param name="companyName">Name of the company</param>
            <returns>Collection of engines</returns>
            <response code="200">Returned collection of engines</response>
            <response code="404">Haven't found company</response>
        </member>
        <member name="M:CarShowroom.API.Controllers.EnginesController.GetEngineFromCompany(System.String,System.Int32)">
            <summary>
            Receive engine 
            </summary>
            <param name="companyName">Name of company</param>
            <param name="engineId">Id of engine</param>
            <returns>Engine which has this Id</returns>
            <response code="200">Returned engine</response>
            <response code="404">Haven't found company or engine</response>
        </member>
        <member name="M:CarShowroom.API.Controllers.EnginesController.GetEngines(System.Int32,System.Int32,System.Nullable{CarShowroom.Dal.Enums.OrderEngineBy})">
            <summary>
            Receive collection of engines
            </summary>
            <param name="pageNumber">Number of page which we want to receive</param>
            <param name="pageSize">Size of pages</param>
            <param name="orderEngine">Enum property by what order collection.<br/>
            Posible variants: Name, EngineCapacity, Power, FuelType</param>
            <returns>Collection of engines</returns>
            <response code="200">Returned collection of engines</response>
        </member>
        <member name="M:CarShowroom.API.Controllers.EnginesController.GetEngine(System.Int32)">
            <summary>
            Receive engine
            </summary>
            <param name="engineId">Id of engine</param>
            <returns>Engine which has this Id</returns>
            <response code="200">Returned engine</response>
            <response code="404">Haven't found engine</response>
        </member>
        <member name="M:CarShowroom.API.Controllers.EnginesController.CreateEngine(CarShowroom.Bll.Models.EngineDTOs.EngineCreationDTO)">
            <summary>
            Add an engine to data base
            </summary>
            <param name="engine">Engine for adding</param>
            <returns>Added engine </returns>
            <response code="201">Added engine to data base</response>
        </member>
        <member name="M:CarShowroom.API.Controllers.EnginesController.DeleteEngine(System.Int32)">
            <summary>
            Delete engine from data base
            </summary>
            <param name="engineId">Id of engine</param>
            <returns>IActionResult</returns>
            <response code="204">Deleted engine from data base</response>
            <response code="404">Haven't found engine</response>
        </member>
        <member name="M:CarShowroom.API.Controllers.EnginesController.PartiallyUpdateEngine(System.Int32,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{CarShowroom.Bll.Models.EngineDTOs.EngineForUpdateDTO})">
            <summary>
            Partially update of engine
            </summary>
            <param name="engineId">Id of engine</param>
            <param name="patchDocument">The set of operations to apply to the engine</param>
            <returns>IActionResult</returns>
            <response code="204">Updated engine</response>
            <response code="404">Haven't found engine</response>
            <response code="400">Incorrect entered command for updating</response>
            <remarks>
            Sample request (this request updates the brand's name)
            PATCH /Engines/id
            [
                {
                    "op": "replace",
                    "path": "/name",
                    "values": "NewName"
                }
            ]
            </remarks> 
        </member>
        <member name="T:CarShowroom.API.CompaniesController">
            <summary>
            Controller to work with companies entity
            </summary>
        </member>
        <member name="M:CarShowroom.API.CompaniesController.#ctor(CarShowroom.Bll.Interfaces.ICompaniesService,AutoMapper.IMapper)">
            <summary>
            Constructor of controller 
            </summary>
            <param name="companiesService">Company service</param>
            <param name="mapper">Auto mapper</param>
            <exception cref="T:System.ArgumentNullException">If parameter is null</exception>
        </member>
        <member name="M:CarShowroom.API.CompaniesController.GetCompanies(System.Int32,System.Int32)">
            <summary>
            Receive collection of companies
            </summary>
            <param name="pageNumber">Number of page which we want to receive</param>
            <param name="pageSize">Size of pages</param>
            <returns>Collection of companies</returns>
            <response code="200">Returned collection of brands</response>
        </member>
        <member name="M:CarShowroom.API.CompaniesController.GetCompany(System.String,System.Boolean,System.Boolean)">
            <summary>
            Receive company
            </summary>
            <param name="companyName">Name of the company</param>
            <param name="includeEngines">Include engines or not</param>
            <param name="includeBrands">Include brands or not</param>
            <returns>Company model</returns>
            /// <response code="200">Returned company with or without collections</response>
            <response code="404">Haven't found company</response>
        </member>
        <member name="M:CarShowroom.API.CompaniesController.CreateCompany(CarShowroom.Bll.Models.CompanyDTOs.CompanyCreationDTO)">
            <summary>
            Add company to data base
            </summary>
            <param name="company">Company for adding</param>
            <returns>Added company</returns>
            <response code="201">Added company to data base</response>
        </member>
        <member name="M:CarShowroom.API.CompaniesController.DeleteCompany(System.String)">
            <summary>
            Delete company from data base
            </summary>
            <param name="companyName">Name of company</param>
            <returns>IActionResult</returns>
            <response code="204">Deleted company from data base</response>
            <response code="404">Haven't found company</response>
        </member>
        <member name="M:CarShowroom.API.CompaniesController.UpdateCompany(System.String,CarShowroom.Bll.Models.CompanyDTOs.CompanyForUpdateDTO)">
            <summary>
            Update of company
            </summary>
            <param name="companyName">Name of company</param>
            <param name="company">New company</param>
            <returns>IActionResult</returns>
            <response code="204">Updated company</response>
            <response code="404">Haven't found company</response>
        </member>
    </members>
</doc>
